Improved spectral calculations in xSPDE2.4

xSPDE2.4 further improves xSPDE2.3 spectral calculations for input-output problems that involve discontinuous noise. The spectral calculation algorithm now accounts better for the fact that there are N-1 independent noise terms for N time points. Temporal Fourier transforms are now taken over the N-1 midpoints between each point. To give arrays the same length in time and frequency, the periodicity of the FFT is used to estimate one extra high-frequency point, with N total outputs. This improves accuracy in input-output calculations by removing a small error of O(1/N). 

This technique is slightly different to the method used in xSPE2.3, which added an extra time point using interpolation. Testing the output has demonstrated that 2.4 is significantly more precise. An additional batchtest is added to illustrate and test for this behaviour in input-output spectra.

There is an internal change made in all Fourier calculations. The array orderings of Fourier transformed fields in calculated averages are all given in 'graphics order', ie, from low to high frequency, rather than in `FFT order' with zero frequency first. This means that the graphics program does not have to use fftshift to re-order Fourier indices. The change makes it simpler to graph and interpret spectral data using other graphics programs. This re-ordering takes place in all averaged data, including observe functions, and it is also included in the w,k coordinate data.


Improved spectral calculations in xSPDE2.3;

xSPDE2.3 has an an improved spectral Fourier transform algorithm. Previously, only the field values at the edge of each time interval were used. This is slightly inaccurate, especially for noise fields, and it creates problems in accurately comparing results with different step sizes. Now the average value over each time interval is computed using a trapezoid rule, giving an estimate of the central value of the field. The N resulting central values are then Fourier transformed. In this method, the time-values that are Fourier transformed are the center values in each time interval. 

This technique of estimating fields is especially useful when there are multiple steps, which xspde uses both for error-estimation and for conserving memory with very small stepsizes. Trapezoidal averaging is now turned for spectral calculations on when a Fourier transform in time is selected. 

To explain this, suppose there are N points and a specified time interval (0,T). For standard, non-trapezoid data, the initial field is specified at t=0, and saved at t = 0, dt, .. T. Here dt = T/(N-1), and there are (N-1) integration steps in total. 

For spectral data, (N-1) trapezoid averaged values are saved at t = dt/2,.. T-dt/2. To give N values the value saved at np = 1 is (a(0)+a(T))/2, to reduce aliasing errors and anomalies. All the N points are then Fourier transformed. The frequency interval is dw = 2.pi/Ndt.


Defined fields in xSPDE2.2;

These are now additional fields that have values defined through 'define' functions. They are otherwise normal fields, with fourier transforms, observe functions etc. To use:

(1) Specify in.fields = [1,1] (for as many SDE fields and defined fields as you need)

(2) Specify in.define as a function to return the defined fields ONLY. 

For instance, with one define field equal to an exponential of time:

in.define    =  @(a,xi,r) exp(1i*r.t); 

(3) Stochastic functions like in.da, in.initial  return the stochastic fields ONLY.

(4) The total number of stored fields is infields(1)+in.fields(2).

(5) To reference a defined field, in this case you would use a(2,:);

(6) Defined fields can include noise or ordinary stochastic fields.

Currently this is only available with the xMP and xRK4 algorithms.

Note that xSPDE2.2 allows the use of complex observe functions. The estimated standard deviations are the rms of real and imaginary standard deviations. This data and its functions can be stored as usual. However, the final plotted lines are always the real parts of any averages or functions, and the errors are estimated most accurately if real functions are averaged.